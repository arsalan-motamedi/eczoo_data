#######################################################
## This is a code entry in the error correction zoo. ##
##       https://github.com/errorcorrectionzoo       ##
#######################################################

code_id: Hayden_May
physical: qudits
logical: qudits

name: 'Hayden May, Summoring information in spacetime'
introduced: '\cite{https://arxiv.org/abs/1210.0913}'

description: '|
It is well-known that quantum information, which is usually presented as a state of a qubit
(or more generally a qudit), cannot be cloned. However, one could
use quantum error correction schemes to store the quantum information
in a larger domain of space, or one can store quantum information
in long-range correlations of a many-body system. Furthermore, it is (in principle)
very easy to clone the quantum information through time by merely waiting.
Having said that, the paper fully characterizes what regions of spacetime
can all hold the same quantum information by making use of the \textit{summonding}, that had been
studeid before in the context of relativistic quantum theory by Kent.\\
We can think of the summonding task by considering \(n\) pair of points in the spacetime,
which are referred to as \textit{call-reveal} points, and are denoted by \( (y_i,z_i)_{i=0}^{n-1} \).
The rule is that only one of the \textit{call points} receive a request, say \(y_j\),
and moreover, the particle should be measured at the corresponding \textit{reveal point} \(z_j\).
If the summoning is possible (with some predetermined strategy), then it is the case that
the quantum information could be propagated through the region of spacetime determined by the call-reveal points.\\
Authors make use of quantum error correction schemes to prove that the fundumental laws of relativity and quantum information,
which are causality and no-cloning, are the only conditions that determine the feasibility of a summoning task (obviously these conditions are necessary,
but the non-trivial part is the sufficiency; this is where quantum error correction techniques are needed).'

#protection: 'Protects against ... Pauli noise. Approximate code with parameters ... for noise model ... .'

# This field starts a list of specific labeled subfields; do not leave it
# empty. If empty, comment out. Also, indentations are important!
#features:

  # The fields below relate to specific properties of the code that are worth
  # noting. In some cases (see below), there might be multiple pieces of
  # information associated with a field (e.g., mutliple encoders/decoders,
  # multiple facts about fault tolerance, etc.); in such cases, the field
  # accepts a list of text entries, with one item per piece of information.
  #
  # Any fields below should be omitted if they do not apply.

#  rate: 'k/n, usually listed for a family of codes, but can be notable for a single one. Discussed alongside other parameters such as check operator weight, distance, etc.'

  # This field that starts a list of strings, indexed by a dash; do not leave it
  # empty. If empty, comment out.
#  encoders:
#    - 'Specific description of a process that makes the states, usually for quantum codes.'
#    - 'Unitary circuit of depth ... \cite{arxiv:old-paper}.'
#    - 'Measurement-based preparation ... with ancilla overhead of ... .'
#    - 'Leave discussion of fault tolerance to fault-tolerance field.'

  # Not all fields are indexed by a dash
#  transversal_gates: 'Transversal ... gates \cite{doi:ok-paper}. Comment out if doesn''t apply.'

#  general_gates:
#    - 'Universal gate set achieved by either additional ... gate.'
#    - 'Magic-state distillation protocols'
#    - 'kth Clifford hierarchy gates obtained by ... circuits'

#  decoders:
#    - 'Details about how syndrome measurements are done; discuss overhead, if applicable.'
#    - 'MWPM decoding algorithm \cite{doi:good-paper} with ... overhead.'
#    - 'Just-in-time decoder with ... \cite{arxiv:awesome-paper}.'

#  fault_tolerance:
#    - 'Transversal gates are fault-tolerant w.r.t. ... noise \cite{doi:ok-paper}'
#    - 'Other fault-tolerant gadgets (measurements, encoders, error correcting steps)'
#    - 'Noise-model-preserving gadgets, noise-biased gates, fault-tolerant flag error correction'
#    - 'Pieceable fault tolerance.'

#  code_capacity_threshold:
#    - '\(1.5%\) error-correction threshold against some noise with *noiseless* decoder of some complexity \cite{arxiv:paper}.'
#    - '\(5.2\%\) asymptotic upper bound from some estimation algortihm (Monte Carlo, e.g.) that may or may not have a feasible decoder.'

#  threshold:
#    - '\(0.3\%\) error-correction threshold ... with *noisy* ... decoder of some complexity \cite{doi:good-paper}.'
#    - '\(10^{-5}\) computational threshold using concatenated scheme under ... noise with overhead of ... '
#    - '\(4.5\%\) asymptotic lower bound on fault-tolerant threshold with ... noise, ... overhead, and ... complexity.'
#    - '\(6.7\%\) threshold using magic-state distillation protocols assuming ... Clifford gates.'

  # Propose a field that you feel is applicable to a large and interesting class of codes
  #some_other_field:
  # - 'detail'

#realizations:
  # List and explain the different "domains" of realizations in list items.
  # Group closely related realizations into a single item. It's OK to have a
  # single list item. Each item should more or less correspond to what would be
  # said in a paragraph.
#  - 'Code used in DVDs \cite{doi:####...}, 5G, etc.'
#  - 'Realized in trapped-ion quantum devices \cite{arXiv:####.#####}, etc.'

#notes:
#  - 'Bounds on n,k, or d for this class, unless mentioned in desciption.'
#  - 'Links to code tables, github, GAP algebra packages, more papers \cite{arXiv:####.#####}.'
#  - 'Connections to physics; based on \(H^4(\mathcal{BG},\mathbb{Z})\)'
#  - 'Can reference other codes, but try to put such connections in the relations fields.'
#  - 'Anything noteworthy that''s not above or below.'

#relations:
#  parents:
#    - code_id: code_id1
#      detail: 'The smallest code family that includes this code that is defined over the same physical space structure or alphabet.'
#  cousins:
#    - code_id: code_id2
#      detail: 'Codes described by a property shared by this code other than physical space (e.g., topological, Hamiltonian-based). Can move to parent if the property was integral in the initial construction/motivation of the code.'
#    - code_id: code_id3
#      detail: 'Code family of similar encoding but with different physical space structures (qudit vs. qubit surface code).'
#    - code_id: code_id4
#      detail: 'Codes (classical or quantum) related on other ways to this code.'
